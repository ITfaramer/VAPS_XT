//=============================================================================
//
// Code generated by [VAPS XT 4.2.1]
//
//=============================================================================

//=============================================================================
//                        I N C L U D E   F I L E S
//=============================================================================

#include "vxtBaseClsOpenGLTriangle.h"
#include "vxtRTMathUtils.h"


#if VXT_CFG_INTROSPECTION_SUPPORT
vxtRTProperty vxtBaseClsOpenGLTriangle::S_PROPS[]  = {
   vxtRTProperty("Position", POSITION_PROP, VXT_TYPE_INFO(vxtTypCoord))
};
#endif

#if VXT_EDITOR_MODE
const vxtChar* vxtBaseClsOpenGLTriangle::s_pDependentTypesDescriptor = "Coord=Struct(X:Float,Y:Float)";
#endif

#if VXT_CFG_DBG_ERROR_MESSAGE_SUPPORT || VXT_CFG_INTROSPECTION_SUPPORT
const vxtChar* const vxtBaseClsOpenGLTriangle::CLASS_NAME = "OpenGLTriangle";
#endif

//============<vxtBaseClsOpenGLTriangle::vxtBaseClsOpenGLTriangle>=============
// 
//  Summary: Constructor of the 'vxtBaseClsOpenGLTriangle' class.
// 
//  Return Value: None.
// 
//=============================================================================
vxtBaseClsOpenGLTriangle::vxtBaseClsOpenGLTriangle(const InitData &a_rInitData)
: vxtRTCodedGrObject()
, mp_Position(a_rInitData.mp_Position)
{
}

//============<vxtBaseClsOpenGLTriangle::~vxtBaseClsOpenGLTriangle>============
// 
//  Summary: Destructor of the 'vxtBaseClsOpenGLTriangle' class.
// 
//  Return Value: None.
// 
//=============================================================================
vxtBaseClsOpenGLTriangle::~vxtBaseClsOpenGLTriangle()
{
}

#if VXT_CFG_DBG_ERROR_MESSAGE_SUPPORT || VXT_CFG_INTROSPECTION_SUPPORT
//==================<vxtBaseClsOpenGLTriangle::pGetClassName>==================
// 
//  Summary: Gets the class name.
// 
//  Return Value: The class name.
// 
//=============================================================================
const vxtChar* vxtBaseClsOpenGLTriangle::pGetClassName() const
{
   return CLASS_NAME;
}
#endif

#if VXT_CFG_INTROSPECTION_SUPPORT
//===================<vxtBaseClsOpenGLTriangle::GetNumProps>===================
// 
//  Summary: Get the number of properties.
// 
//  Return Value: Number of properties.
// 
//=============================================================================
vxtUShort vxtBaseClsOpenGLTriangle::GetNumProps() const
{
   return VXT_USHORT_ARRAY_SIZE(S_PROPS);
}
#endif

#if VXT_CFG_SET_PROPERTY_SUPPORT
//==================<vxtBaseClsOpenGLTriangle::vSetProperty>===================
// 
//  Summary: Set part or all of the value of a property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsOpenGLTriangle::vSetProperty(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   switch(a_rIds.GetFirstPropId())
   {
      case POSITION_PROP :
      {
         vSetPositionProp(a_rTopContext, a_rIds.rGetRestPath(), a_rValue);
      }
      break;
      default :
      {
         // Error: invalid prop id
      }
   }
}
#endif

#if VXT_CFG_OBJECT_GET_PROPERTY_SUPPORT
//===================<vxtBaseClsOpenGLTriangle::GetProperty>===================
// 
//  Summary: Get part or all of the value of a property.
// 
//  Return Value: Part or all of the value of a property.
// 
//=============================================================================
vxtRTValue vxtBaseClsOpenGLTriangle::GetProperty(const vxtRTPropIdPath &a_rIds)
{
   vxtRTValue Ret;

   switch(a_rIds.GetFirstPropId())
   {
      case POSITION_PROP :
      {
         Ret = mp_Position.GetRTValue(a_rIds.rGetRestPath());
      }
      break;
      default :
      {
         // The default Ret is invalid (pGetData() returns VXT_NULL)
      }
   }
   return Ret;
}
#endif

#if VXT_CFG_GET_POSITION_SUPPORT
//==================<vxtBaseClsOpenGLTriangle::vGetPosition>===================
// 
//  Summary: Get the object's position.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsOpenGLTriangle::vGetPosition(vxtRCoord &a_rPos)
{
   a_rPos.X = mp_Position.GetFieldX();
   a_rPos.Y = mp_Position.GetFieldY();
}
#endif

#if VXT_CFG_SET_POSITION_SUPPORT
//==================<vxtBaseClsOpenGLTriangle::vSetPosition>===================
// 
//  Summary: Set the object's position.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsOpenGLTriangle::vSetPosition(const vxtRTTopContext &a_rTopContext, const vxtRCoord &a_rPos)
{
   vSetPositionProp(a_rTopContext, vxtTypCoord(a_rPos.X, a_rPos.Y));
}
#endif

//================<vxtBaseClsOpenGLTriangle::vSetPositionProp>=================
// 
//  Summary: Set the value of the 'Position' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsOpenGLTriangle::vSetPositionProp(const vxtRTTopContext &a_rTopContext, const vxtTypCoord &a_rPosition)
{
   vxtBool Changed = VXT_FALSE;
   mp_Position.vAssign(a_rPosition, Changed);

   if (Changed)
   {
      vRequireDrawAndExtentCalculation(a_rTopContext);
      vRequireUpdate();
   }
}

//================<vxtBaseClsOpenGLTriangle::vSetPositionProp>=================
// 
//  Summary: Set the value of the 'Position' property.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtBaseClsOpenGLTriangle::vSetPositionProp(const vxtRTTopContext &a_rTopContext, const vxtRTPropIdPath &a_rIds, const vxtRTValue &a_rValue)
{
   vxtBool Changed = VXT_FALSE;
   mp_Position.vAssign(a_rIds, a_rValue, Changed);

   if (Changed)
   {
      vRequireDrawAndExtentCalculation(a_rTopContext);
      vRequireUpdate();
   }
}

#if VXT_CFG_INTROSPECTION_SUPPORT
//==================<vxtBaseClsOpenGLTriangle::aGetPropInfo>===================
// 
//  Summary: Get a pointer on the properties of this object.
// 
//  Return Value: A pointer to the properties of this object.
// 
//=============================================================================
vxtRTProperty * vxtBaseClsOpenGLTriangle::aGetPropInfo()
{
   return S_PROPS;
}
#endif

#if VXT_CFG_INTROSPECTION_SUPPORT
//==================<vxtBaseClsOpenGLTriangle::aGetPropInfo>===================
// 
//  Summary: Get a pointer on the properties and the number of properties of
//           this object.
// 
//  Return Value: A pointer to the properties of this object.
// 
//=============================================================================
const vxtRTProperty * vxtBaseClsOpenGLTriangle::aGetPropInfo(vxtUShort &a_rNumProps)
{
   a_rNumProps = VXT_USHORT_ARRAY_SIZE(S_PROPS);
   return S_PROPS;
}
#endif

#if VXT_EDITOR_MODE
const vxtChar * vxtBaseClsOpenGLTriangle::pGetDependentTypesDescriptor()
{
   return s_pDependentTypesDescriptor;
}
#endif




// END OF FILE

