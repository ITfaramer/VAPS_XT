//=============================================================================
//
// Code generated by [VAPS XT 4.1]
//
//=============================================================================

//=============================================================================
//                        I N C L U D E   F I L E S
//=============================================================================

#include "vxtClsOpenGLTriangle.h"
#include "vxtRTMathUtils.h"

//================<vxtClsOpenGLTriangle::vxtClsOpenGLTriangle>=================
// 
//  Summary: Constructor of the 'vxtClsOpenGLTriangle' class.
// 
//  Return Value: None.
// 
//=============================================================================
vxtClsOpenGLTriangle::vxtClsOpenGLTriangle(const InitData &a_rInitData)
: vxtBaseClsOpenGLTriangle(a_rInitData)
{
}

//================<vxtClsOpenGLTriangle::~vxtClsOpenGLTriangle>================
// 
//  Summary: Destructor of the 'vxtClsOpenGLTriangle' class.
// 
//  Return Value: None.
// 
//=============================================================================
vxtClsOpenGLTriangle::~vxtClsOpenGLTriangle()
{
}

//========================<vxtClsOpenGLTriangle::vDraw>========================
// 
//  Summary: Draw the object.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtClsOpenGLTriangle::vDraw(vxtRTDrawMode &a_rMode)
{
	a_rMode.rGetGraphics().vBeginDirectGLCalls();
glShadeModel(GL_SMOOTH);
glTranslatef(0, 0, 0);
glRotated(0, 0, 0, 0);
glBegin(GL_TRIANGLES);
glColor3f(1.0f, 0.0f, 0.0f);
glVertex3f(0.0f, 100, 0.0f);

glColor3f(0.0f, 1.0f, 0.0f);
glVertex3f(-100, -100, 0.0f);

glColor3f(0.0f, 0.0f, 1.0f);
glVertex3f(100, -100, 0.0f);
glEnd();
a_rMode.rGetGraphics().vEndDirectGLCalls();

}

#if VXT_EDITOR_MODE
//=================<vxtClsOpenGLTriangle::pGetSelectedObject>==================
// 
//  Summary: Get the selected GrObject.
// 
//  Return Value: A pointer to the selected GrObject.
// 
//=============================================================================
vxtRTGrObject * vxtClsOpenGLTriangle::pGetSelectedObject(const vxtRTTopContext &a_rTopContext, vxtFloat a_X, vxtFloat a_Y, vxtFloat a_CurrentScaling, vxtRTObject *a_pRootObj)
{
   return VXT_NULL;
}
#endif

#if VXT_EDITOR_MODE || VXT_CGRUNTIME_MODE
//==================<vxtClsOpenGLTriangle::vCalculateExtent>===================
// 
//  Summary: Calculate the extent of the object.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtClsOpenGLTriangle::vCalculateExtent(const vxtRTTopContext &a_rTopContext, vxtRRegion &a_rExtent)
{
}
#endif

#if VXT_EDITOR_MODE
//======================<vxtClsOpenGLTriangle::CanRotate>======================
// 
//  Summary: Query whether this GrObject can emulate rotation effect without
//           calls to a graphical driver.
// 
//  Return Value: VXT_FALSE.
// 
//=============================================================================
vxtBool vxtClsOpenGLTriangle::CanRotate() const
{
   return VXT_FALSE;
}
#endif

#if VXT_EDITOR_MODE
//=======================<vxtClsOpenGLTriangle::vRotate>=======================
// 
//  Summary: Emulate rotation effect by adjusting the object properties.
// 
//  Return Value: None.
// 
//=============================================================================
void vxtClsOpenGLTriangle::vRotate(vxtFloat a_Angle)
{
}
#endif




// END OF FILE

