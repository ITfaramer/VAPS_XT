<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE object_implementation PUBLIC "-//PresagisCanada//DTD VapsXT 19.0" "file:///C:/VAPSXTDTD/VapsXT_19.dtd">

<object_implementation impl_name="MainFrames" class="MainFrames">
  <built_object_implementation>
    <model>
      <prop name="BkColor">stdBlack</prop>
      <prop name="DrawingUnit">Pixel</prop>
      <prop name="RulerUnits">Pixel</prop>
      <structprop name="Grid">
        <field name="Visible">FALSE</field>
        <field name="SubDivisions">2</field>
        <field name="Color">stdWhite</field>
        <structfield name="Snap">
          <field name="Enabled">FALSE</field>
          <field name="SensitivityPercent">50</field>
        </structfield>
      </structprop>
    </model>
    <state name="TopState" guid="20989358-c401-47f5-9887-844d52eeb81a">
      <model>
        <prop name="InheritFromInheritanceGroups">TRUE</prop>
        <prop name="UpdateChildrenOnlyIfActive">FALSE</prop>
      </model>
      <state name="Normal" guid="4d0e2c8a-949a-4413-a68f-e7cc7845fc75">
        <model>
          <prop name="InheritFromInheritanceGroups">TRUE</prop>
          <prop name="UpdateChildrenOnlyIfActive">FALSE</prop>
        </model>
      </state>
      <state name="Drag" guid="eab69d60-d570-4bf5-8560-ec48801ee064">
        <model>
          <prop name="InheritFromInheritanceGroups">TRUE</prop>
          <prop name="UpdateChildrenOnlyIfActive">FALSE</prop>
        </model>
      </state>
    </state>
    <object name="PosBeforeDrag" class="CoordData" guid="88275e90-66c7-46ff-80d2-140b454cc0c0">
      <model>
        <xyprop name="Value" x="0" y="0"/>
      </model>
    </object>
    <object name="RectActiveArea_1" class="RectActiveArea" guid="4d54d3a2-4770-4f89-b6cc-00ab64da0412">
      <model>
        <prop name="IsVisible">TRUE</prop>
        <xyprop name="Point1" x="0" y="0"/>
        <xyprop name="Point2" x="640" y="640"/>
        <prop name="Enable">TRUE</prop>
        <prop name="EnableSingleTouch">TRUE</prop>
        <prop name="CaptureDrag">TRUE</prop>
        <prop name="ClipToArea">FALSE</prop>
        <prop name="CursorRepr">Default</prop>
      </model>
    </object>
    <object name="SimpleGroup_1" class="SimpleGroup" guid="097ff789-a375-4d2a-9f54-84b575aa39d2">
      <model>
        <xyprop name="Position" x="0" y="0"/>
        <prop name="IsVisible">TRUE</prop>
        <prop name="Enable">TRUE</prop>
        <prop name="UpdateChildrenOnlyIfVisible">FALSE</prop>
      </model>
      <object name="BtnBack_1" class="BtnBack" guid="4a8a51a7-3d65-4aff-a2c2-88437d39814a">
        <model>
          <xyprop name="Position" x="0" y="590"/>
          <xyprop name="Size" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <prop name="ID">0</prop>
        </model>
      </object>
      <object name="BtnExtend_1" class="BtnExtend" guid="39ab3c6e-1d2a-4d38-bea5-6d26e3ffee9b">
        <model>
          <xyprop name="Position" x="560" y="560"/>
          <xyprop name="Size" x="0" y="0"/>
          <prop name="IsVisible">TRUE</prop>
          <prop name="ID">0</prop>
        </model>
      </object>
      <object name="BtnDown_1" class="BtnDown" guid="7052fb09-a0d2-4378-931b-02a100ef05dc">
        <model>
          <xyprop name="Position" x="290" y="0"/>
          <xyprop name="Size" x="0" y="0"/>
          <prop name="IsVisible">TRUE</prop>
          <prop name="ID">0</prop>
        </model>
      </object>
      <object name="OneMain_1" class="OneMain" guid="48fe12a4-26cf-4999-afe8-5a2a60d02488">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
      <object name="OneMax_1" class="OneMax" guid="51515670-8e45-4b58-a824-16d5c3a2baf5">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
      <object name="OneExtend_1" class="OneExtend" guid="e4786775-0e3d-46bf-8e0d-e1a3ec44e0a5">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
      <object name="TwoMain_1" class="TwoMain" guid="aca023c8-594d-4bcd-a83d-6b5e6a7c1146">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
      <object name="TwoMax_1" class="TwoMax" guid="5f21719d-ecc2-498e-9bd4-9a4159d6fadc">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
      <object name="TwoExtend_1" class="TwoExtend" guid="834a1752-af9b-436b-9ad3-0f83d0f2f206">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
      <object name="ThreeMain_1" class="ThreeMain" guid="a92bbe57-1778-4774-ac9f-aa63045affc9">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
      <object name="ThreeMax_1" class="ThreeMax" guid="61e5adfb-d71e-4de6-a865-3b54457eb066">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
      <object name="ThreeExtend_1" class="ThreeExtend" guid="53d4493e-6927-46ca-8184-d204669750ab">
        <model>
          <xyprop name="Position" x="0" y="0"/>
          <prop name="IsVisible">FALSE</prop>
          <xyprop name="Size" x="0" y="0"/>
        </model>
      </object>
    </object>
    <connections>
      <connection src=".LayoutStatus.FrameID" dest="BtnBack_1.ID"/>
      <connection src=".LayoutStatus.FrameID" dest="BtnExtend_1.ID"/>
      <connection src=".LayoutStatus.FrameID" dest="BtnDown_1.ID"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 2) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 1)" dest="OneMain_1.IsVisible"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 3) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 1)" dest="OneMax_1.IsVisible"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 4) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 1)" dest="OneExtend_1.IsVisible"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 2) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 2)" dest="TwoMain_1.IsVisible"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 3) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 2)" dest="TwoMax_1.IsVisible"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 4) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 2)" dest="TwoExtend_1.IsVisible"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 2) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 3)" dest="ThreeMain_1.IsVisible"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 3) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 3)" dest="ThreeMax_1.IsVisible"/>
      <connection src="(.LayoutStatus.CurModulePara.Mode == 4) &amp;&amp; (.LayoutStatus.CurModulePara.Module == 3)" dest="ThreeExtend_1.IsVisible"/>
    </connections>
    <transitions>
      <default_transition state="TopState" default="Normal"/>
      <transition name="" src="TopState" trigger="BtnBack_1.evBack(e)">
        <actions>.evBack(e);
BtnBack_1.IsVisible=Bool::FALSE;
BtnDown_1.IsVisible=Bool::TRUE;
BtnExtend_1.IsVisible=Bool::TRUE;</actions>
      </transition>
      <transition name="" src="TopState" trigger="BtnDown_1.evDown(e)">
        <actions>.evDown(e);
BtnBack_1.IsVisible=Bool::TRUE;
BtnDown_1.IsVisible=Bool::FALSE;
BtnExtend_1.IsVisible=Bool::FALSE;
BtnBack_1.Position.Y=920;
.BringToFront();</actions>
      </transition>
      <transition name="" src="TopState" trigger="BtnExtend_1.evExtend(e)">
        <actions>.evExtend(e);
BtnBack_1.IsVisible=Bool::TRUE;
BtnDown_1.IsVisible=Bool::FALSE;
BtnExtend_1.IsVisible=Bool::FALSE;
.BringToFront();</actions>
      </transition>
      <transition name="Transition_1" src="Normal" trigger="RectActiveArea_1.evPress(e)" target="Drag">
        <actions>PosBeforeDrag.Value=e;</actions>
      </transition>
      <transition name="" src="Drag" trigger="RectActiveArea_1.evDrag(e)">
        <actions>SimpleGroup_1.Position.X = e.X - PosBeforeDrag.Value.X;
SimpleGroup_1.Position.Y = e.Y - PosBeforeDrag.Value.Y;</actions>
      </transition>
      <transition name="Transition_2" src="Drag" trigger="RectActiveArea_1.evRelease(e)" target="Normal">
        <actions>SimpleGroup_1.Position.X=0;
SimpleGroup_1.Position.Y=0;

//.PostError(0,ConcatStrings(&quot;drag now ID=&quot;,.LayoutStatus.FrameID));
var s type UShort = .LayoutFromLayout.ValidCount;

for i up from 0 count s{
    if(
    (e.X + .Position.X &gt;= .LayoutFromLayout.Lay[i].PositionX) &amp;&amp;
    (e.X + .Position.X &lt;= .LayoutFromLayout.Lay[i].PositionX + .LayoutFromLayout.Lay[i].SizeX) &amp;&amp;
    (e.Y + .Position.Y &gt;= .LayoutFromLayout.Lay[i].PositionY) &amp;&amp;
    (e.Y + .Position.Y &lt;= .LayoutFromLayout.Lay[i].PositionY + .LayoutFromLayout.Lay[i].SizeY)
    ){
    //.PostError(0,ConcatStrings(&quot;swap id is= &quot;,i));
    //old-&gt;new
    .evSwapFrame(.LayoutStatus.FrameID,i);
    }//if
}//for</actions>
      </transition>
    </transitions>
    <statechart_layout>
      <scl_object name="Normal" class="SCS:State" guid="bc25d96b-3665-4a96-a72e-ffbb4c0217ce">
        <model>
          <xyprop name="Point1" x="179" y="195"/>
          <xyprop name="Point2" x="56" y="315"/>
          <xyprop name="ClipState" x="169" y="272.5"/>
          <prop name="IsClipSet">0</prop>
          <xyprop name="ClipPreviewImages" x="169" y="205"/>
          <prop name="IsClipPreviewImagesSet">0</prop>
        </model>
        <incominglinks/>
      </scl_object>
      <scl_object name="Drag" class="SCS:State" guid="685d1a76-eaec-4871-9c16-40eff797eb5f">
        <model>
          <xyprop name="Point1" x="612" y="197"/>
          <xyprop name="Point2" x="495" y="310"/>
          <xyprop name="ClipState" x="602" y="269.25"/>
          <prop name="IsClipSet">0</prop>
          <xyprop name="ClipPreviewImages" x="602" y="207"/>
          <prop name="IsClipPreviewImagesSet">0</prop>
        </model>
        <incominglinks/>
      </scl_object>
      <scl_object name="InitialTransition_1" class="SCS:InitialTransition" guid="7420a848-5631-4e8c-8bcc-fce4a613c46a">
        <model>
          <xyprop name="Point1" x="-4" y="259"/>
          <xyprop name="Point2" x="56" y="257"/>
        </model>
      </scl_object>
      <scl_object name="Transition_1" class="SCS:Transition" guid="5b904848-016e-476d-b328-23c73462ce0c">
        <model>
          <xyprop name="Point1" x="179" y="283"/>
          <xyprop name="Point2" x="495" y="277"/>
          <xyprop name="Ctrl1" x="258" y="281.5"/>
          <xyprop name="Ctrl2" x="416" y="278.5"/>
          <xyprop name="Origin" x="337" y="280"/>
          <xyprop name="ClipTransition" x="357" y="260"/>
          <prop name="IsClipSet">0</prop>
          <prop name="InformalText"></prop>
        </model>
      </scl_object>
      <scl_object name="Transition_2" class="SCS:Transition" guid="8442fa09-e980-44d0-9729-fc077ad02799">
        <model>
          <xyprop name="Point1" x="495" y="230"/>
          <xyprop name="Point2" x="179" y="224"/>
          <xyprop name="Ctrl1" x="416" y="228.5"/>
          <xyprop name="Ctrl2" x="258" y="225.5"/>
          <xyprop name="Origin" x="337" y="227"/>
          <xyprop name="ClipTransition" x="357" y="207"/>
          <prop name="IsClipSet">0</prop>
          <prop name="InformalText"></prop>
        </model>
      </scl_object>
    </statechart_layout>
  </built_object_implementation>
</object_implementation>
